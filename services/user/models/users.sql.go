// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package models

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, password) VALUES ($1, $2) RETURNING id
`

type CreateUserParams struct {
	Name     string
	Password []byte
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Name, arg.Password)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, password, tags FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		pq.Array(&i.Tags),
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, name, password, tags FROM users WHERE name = $1 LIMIT 1
`

func (q *Queries) GetUserByName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		pq.Array(&i.Tags),
	)
	return i, err
}

const getUserPassword = `-- name: GetUserPassword :one
SELECT password FROM users WHERE name = $1
`

func (q *Queries) GetUserPassword(ctx context.Context, name string) ([]byte, error) {
	row := q.db.QueryRowContext(ctx, getUserPassword, name)
	var password []byte
	err := row.Scan(&password)
	return password, err
}

const getUserTags = `-- name: GetUserTags :one
SELECT tags FROM users WHERE id = $1
`

func (q *Queries) GetUserTags(ctx context.Context, id uuid.UUID) ([]string, error) {
	row := q.db.QueryRowContext(ctx, getUserTags, id)
	var tags []string
	err := row.Scan(pq.Array(&tags))
	return tags, err
}

const updateUserTags = `-- name: UpdateUserTags :exec
UPDATE users SET tags = $1
`

func (q *Queries) UpdateUserTags(ctx context.Context, tags []string) error {
	_, err := q.db.ExecContext(ctx, updateUserTags, pq.Array(tags))
	return err
}
