// Code generated by sqlc. DO NOT EDIT.
// source: news.sql

package models

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const createNews = `-- name: CreateNews :one
INSERT INTO news (title, "timestamp", tags) VALUES ($1, $2, $3) RETURNING id
`

type CreateNewsParams struct {
	Title     string
	Timestamp time.Time
	Tags      []string
}

func (q *Queries) CreateNews(ctx context.Context, arg CreateNewsParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createNews, arg.Title, arg.Timestamp, pq.Array(arg.Tags))
	var id int32
	err := row.Scan(&id)
	return id, err
}

const listNewByTagsPaged = `-- name: ListNewByTagsPaged :many
SELECT id, title, timestamp, tags FROM news WHERE "timestamp" < $1 AND tags @> $2::text[] ORDER BY "timestamp" DESC
`

type ListNewByTagsPagedParams struct {
	Timestamp time.Time
	Tags      []string
}

func (q *Queries) ListNewByTagsPaged(ctx context.Context, arg ListNewByTagsPagedParams) ([]News, error) {
	rows, err := q.db.QueryContext(ctx, listNewByTagsPaged, arg.Timestamp, pq.Array(arg.Tags))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []News
	for rows.Next() {
		var i News
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Timestamp,
			pq.Array(&i.Tags),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNewsByTags = `-- name: ListNewsByTags :many
SELECT id, title, timestamp, tags FROM news WHERE tags @> $1::text[] ORDER BY "timestamp" DESC
`

func (q *Queries) ListNewsByTags(ctx context.Context, tags []string) ([]News, error) {
	rows, err := q.db.QueryContext(ctx, listNewsByTags, pq.Array(tags))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []News
	for rows.Next() {
		var i News
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Timestamp,
			pq.Array(&i.Tags),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
